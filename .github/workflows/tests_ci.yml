name: Tests (smoke, unit-fast segmented, coverage)

on:
  push:
    branches:
      - main
      - 'release/*'
  pull_request:
    branches:
      - main
      - 'release/*'
  workflow_dispatch:
  # Restored push/pull_request triggers after v0.1.0a1 tagging
permissions:
  contents: read

concurrency:
  group: tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  smoke-fast:
    name: Smoke fast (stable, no plugins)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      DEVSYNTH_RESOURCE_CHROMADB_AVAILABLE: 'false'
      DEVSYNTH_RESOURCE_DUCKDB_AVAILABLE: 'false'
      DEVSYNTH_RESOURCE_FAISS_AVAILABLE: 'false'
      DEVSYNTH_RESOURCE_KUZU_AVAILABLE: 'false'
      DEVSYNTH_RESOURCE_LMDB_AVAILABLE: 'false'
      DEVSYNTH_RESOURCE_RDFLIB_AVAILABLE: 'false'
      DEVSYNTH_RESOURCE_TINYDB_AVAILABLE: 'false'
      DEVSYNTH_RESOURCE_LMSTUDIO_AVAILABLE: 'false'
      OPENAI_API_KEY: 'test-openai-key'
      DEVSYNTH_NO_FILE_LOGGING: '1'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'poetry'
      - uses: abatilo/actions-poetry@v3
        with:
          poetry-version: '1.8.3'
      - name: Install dependencies (dev minimal)
        run: |
          poetry install --with dev --extras minimal
      - name: Run smoke fast
        env:
          PYTEST_DISABLE_PLUGIN_AUTOLOAD: '1'
        run: |
          poetry run devsynth run-tests --smoke --speed=fast --no-parallel --maxfail=1

  unit-fast-segmented:
    name: Unit fast segmented
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: smoke-fast
    env:
      DEVSYNTH_RESOURCE_CHROMADB_AVAILABLE: 'false'
      DEVSYNTH_RESOURCE_DUCKDB_AVAILABLE: 'false'
      DEVSYNTH_RESOURCE_FAISS_AVAILABLE: 'false'
      DEVSYNTH_RESOURCE_KUZU_AVAILABLE: 'false'
      DEVSYNTH_RESOURCE_LMDB_AVAILABLE: 'false'
      DEVSYNTH_RESOURCE_RDFLIB_AVAILABLE: 'false'
      DEVSYNTH_RESOURCE_TINYDB_AVAILABLE: 'false'
      DEVSYNTH_RESOURCE_LMSTUDIO_AVAILABLE: 'false'
      OPENAI_API_KEY: 'test-openai-key'
      DEVSYNTH_NO_FILE_LOGGING: '1'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'poetry'
      - uses: abatilo/actions-poetry@v3
        with:
          poetry-version: '1.8.3'
      - name: Install dependencies (tests profile)
        run: |
          poetry install --with dev --extras "tests"
      - name: Run unit fast segmented
        run: |
          poetry run devsynth run-tests --target unit-tests --speed=fast --segment --segment-size=50 --maxfail=1
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test_reports-unit-fast
          path: test_reports/**
          if-no-files-found: warn

  coverage-report:
    name: Coverage report (HTML)
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [smoke-fast, unit-fast-segmented]
    env:
      DEVSYNTH_RESOURCE_CHROMADB_AVAILABLE: 'false'
      DEVSYNTH_RESOURCE_DUCKDB_AVAILABLE: 'false'
      DEVSYNTH_RESOURCE_FAISS_AVAILABLE: 'false'
      DEVSYNTH_RESOURCE_KUZU_AVAILABLE: 'false'
      DEVSYNTH_RESOURCE_LMDB_AVAILABLE: 'false'
      DEVSYNTH_RESOURCE_RDFLIB_AVAILABLE: 'false'
      DEVSYNTH_RESOURCE_TINYDB_AVAILABLE: 'false'
      DEVSYNTH_RESOURCE_LMSTUDIO_AVAILABLE: 'false'
      OPENAI_API_KEY: 'test-openai-key'
      DEVSYNTH_NO_FILE_LOGGING: '1'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'poetry'
      - uses: abatilo/actions-poetry@v3
        with:
          poetry-version: '1.8.3'
      - name: Install dependencies (tests + htmlcov)
        run: |
          poetry install --with dev --extras "tests"
      - name: Generate coverage (HTML)
        run: |
          mkdir -p htmlcov
          poetry run pytest -q --cov=src/devsynth --cov-report=term-missing --cov-report=html
      - name: Upload coverage HTML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov
          path: htmlcov/**
          if-no-files-found: warn

  log-scan:
    name: Enforce clean logs (no unknown mark/config warnings)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [smoke-fast, unit-fast-segmented]
    steps:
      - uses: actions/checkout@v4
      - name: Prepare simulated logs
        run: |
          echo "This step would normally download logs from artifacts or use job outputs." > logs.txt
      - name: Fail on PytestUnknownMarkWarning or PytestConfigWarning in logs
        run: |
          if grep -E "PytestUnknownMarkWarning|PytestConfigWarning" -R . ; then
            echo "Found disallowed warnings in logs." >&2
            exit 1
          fi
          echo "No disallowed warnings detected."
