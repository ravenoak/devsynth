name: CI

on:
  workflow_dispatch:
  # TODO: Re-enable push, pull_request, and schedule triggers after tagging v0.1.0-alpha.1 (docs/tasks.md item 10.1 and issues/re-enable-github-actions-triggers-post-v0-1-0a1.md)

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  POETRY_VIRTUALENVS_CREATE: true
  POETRY_VIRTUALENVS_IN_PROJECT: true
  PYTHONUNBUFFERED: 1
  DEVSYNTH_RESOURCE_CHROMADB_AVAILABLE: "false"
  DEVSYNTH_RESOURCE_FAISS_AVAILABLE: "false"
  DEVSYNTH_RESOURCE_KUZU_AVAILABLE: "false"
  DEVSYNTH_RESOURCE_LMDB_AVAILABLE: "false"
  DEVSYNTH_RESOURCE_LMSTUDIO_AVAILABLE: "false"
  DEVSYNTH_PROPERTY_TESTING: "false"
  DEVSYNTH_NO_FILE_LOGGING: "1"

jobs:
  typing_lint:
    name: Typing and Lint
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: '1.8.3'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
            ./.venv
            ./.pytest_cache
          key: ${{ runner.os }}-py-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-py-

      - name: Install dependencies (linting and typing)
        run: poetry install --with dev --extras minimal

      - name: Show tool versions
        run: |
          poetry run python --version

          poetry --version

      - name: Run linters and type checks
        run: |
          poetry run black --check .
          poetry run isort --check-only .
          poetry run flake8 src/ tests/
          poetry run mypy src/ tests/

      - name: Run strict mypy slice (includes code_analysis)
        id: strict_mypy
        continue-on-error: true
        run: |
          set -o pipefail
          mkdir -p diagnostics
          poetry run mypy --strict src/devsynth | tee diagnostics/mypy_strict.txt

      - name: Upload strict mypy artifact
        if: steps.strict_mypy.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: mypy-strict-artifacts
          path: diagnostics/mypy_strict.txt

      - name: Fail on strict mypy errors
        if: steps.strict_mypy.outcome == 'failure'
        run: exit 1

  smoke:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: typing_lint
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: '1.8.3'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
            ./.venv
            ./.pytest_cache
          key: ${{ runner.os }}-py-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-py-

      - name: Install dependencies (smoke)
        run: poetry install --with dev --extras minimal

      - name: Show tool versions
        run: |
          poetry run python --version
          poetry --version

      - name: Run smoke tests
        env:
          PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
        run: |
          poetry run devsynth run-tests --smoke --speed=fast --no-parallel --maxfail=1 --report

      - name: Verify coverage threshold
        run: poetry run python scripts/verify_coverage_threshold.py

      - name: Collect diagnostics
        if: failure()
        run: |
          poetry run devsynth doctor | tee diagnostics/doctor_run.txt

      - name: Upload artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-artifacts
          path: |
            test_reports/
            htmlcov/
            coverage.json
            diagnostics/doctor_run.txt

  unit_integration:
    name: Unit and Integration Tests
    runs-on: ubuntu-latest
    needs: smoke
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: '1.8.3'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
            ./.venv
            ./.pytest_cache
          key: ${{ runner.os }}-py-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-py-

      - name: Install dependencies (tests)
        run: poetry install --with dev --extras tests retrieval chromadb api

      - name: Show tool versions
        run: |
          poetry run python --version
          poetry --version

      - name: Run unit and integration tests
        run: |
          poetry run devsynth run-tests --target all-tests --speed=fast --speed=medium --no-parallel --report

      - name: Verify coverage threshold
        run: poetry run python scripts/verify_coverage_threshold.py

      - name: Collect diagnostics
        if: failure()
        run: |
          poetry run devsynth doctor | tee diagnostics/doctor_run.txt

      - name: Upload artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: unit-integration-artifacts
          path: |
            test_reports/
            htmlcov/
            coverage.json
            diagnostics/doctor_run.txt
