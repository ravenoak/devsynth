[pytest]
# Run tests sequentially to avoid resource contention with heavy fixtures
# Default to a FAST subset: exclude slow and gui by default. Full suite can override with PYTEST_ADDOPTS or -m "all".
addopts = -p no:benchmark --cov=src/devsynth --cov-report=term-missing --cov-fail-under=90 -m "not slow and not gui"
norecursedirs = templates .hypothesis
# Run tests from the tests directory only
# This prevents template files from being collected as tests.
testpaths = tests
markers =
    requires_resource(name)
    resource_tinydb: derived marker for selecting TinyDB-gated tests (auto-added)
    resource_faiss: derived marker for selecting FAISS-gated tests (auto-added)
    requires_llm_provider: mark test as requiring an LLM provider
    fast: mark test as fast (execution time < 1s)
    medium: mark test as medium speed (execution time between 1s and 5s)
    slow: mark test as slow (execution time > 5s)
    property: mark property-based test (opt-in via DEVSYNTH_PROPERTY_TESTING)
    gui: mark test as requiring GUI or optional UI extras (NiceGUI/DearPyGUI)
    isolation: mark test as requiring isolation (should be run separately from other tests)
    test-metrics: mark test as related to test metrics functionality
    code-analysis: mark test as related to code analysis functionality
    manifest-analysis: mark test as related to manifest analysis functionality
    apispec-generation: mark test as related to API specification generation
    dbschema-generation: mark test as related to database schema generation
    docs-generation: mark test as related to documentation generation
    project-ingestion: mark test as related to project ingestion functionality
    requirements-management: mark test as related to requirements management
    manifest-validation: mark test as related to manifest validation
    metadata-validation: mark test as related to metadata validation
    webapp-generation: mark test as related to web application generation
    memory_intensive: mark test as using significant memory
    no_network: mark test as not performing network access
    docker: mark test as requiring Docker
    smoke: mark test as part of smoke profile (minimal plugins, no parallel)
    unit: mark test as a unit test subset

# Note on running isolation tests:
# Tests marked with @pytest.mark.isolation should be run separately from other tests.
# To run only isolation tests: pytest -m isolation
# To run all tests except isolation tests: pytest -m "not isolation"
# Configure asyncio mode for pytest-asyncio
asyncio_mode = strict
# BDD features base directory - using pytest-bdd 8.1.0 compatible format
bdd_features_base_dir = tests/behavior/features
# Load test categorization plugin
python_files = test_*.py conftest.py conftest_extensions.py

# Targeted suppression for pytest-bdd scenario wrapper speed-marker warnings
# We enforce speed markers via static verifier and auto-injection in tests/conftest.py.
# These collection-time PytestWarnings are noisy and non-actionable for maintainers.
filterwarnings =
    ignore:.*speed marker.*:pytest.PytestWarning
