[pytest]
# Run tests sequentially to avoid resource contention with heavy fixtures
# Default to a FAST subset: exclude slow and gui by default. Full suite can override with PYTEST_ADDOPTS or -m "all".
addopts = -p no:benchmark --cov=src/devsynth --cov-report=term-missing --cov-fail-under=70 -m "not slow and not gui"
norecursedirs = templates .hypothesis
# Run tests from the tests directory only
# This prevents template files from being collected as tests.
testpaths = tests
markers =
    requires_resource(name)
    resource_tinydb: derived marker for selecting TinyDB-gated tests (auto-added)
    resource_duckdb: derived marker for selecting DuckDB-gated tests (auto-added)
    resource_rdflib: derived marker for selecting RDFLib-gated tests (auto-added)
    resource_codebase: derived marker for selecting codebase-dependent tests (auto-added)
    resource_webui: derived marker for selecting WebUI-gated tests (auto-added)
    resource_faiss: derived marker for selecting FAISS-gated tests (auto-added)
    requires_llm_provider: mark test as requiring an LLM provider
    fast: mark test as fast (execution time < 1s)
    medium: mark test as medium speed (execution time between 1s and 5s)
    slow: mark test as slow (execution time > 5s)
    property: mark property-based test (opt-in via DEVSYNTH_PROPERTY_TESTING)
    gui: mark test as requiring GUI or optional UI extras (NiceGUI/DearPyGUI)
    isolation: mark test as requiring isolation (should be run separately from other tests)
    test-metrics: mark test as related to test metrics functionality
    test_metrics: alias for test metrics functionality
    code-analysis: mark test as related to code analysis functionality
    manifest-analysis: mark test as related to manifest analysis functionality
    apispec-generation: mark test as related to API specification generation
    dbschema-generation: mark test as related to database schema generation
    docs-generation: mark test as related to documentation generation
    project-ingestion: mark test as related to project ingestion functionality
    requirements-management: mark test as related to requirements management
    manifest-validation: mark test as related to manifest validation
    metadata-validation: mark test as related to metadata validation
    webapp-generation: mark test as related to web application generation
    memory_intensive: mark test as using significant memory
    no_network: mark test as not performing network access
    docker: mark test as requiring Docker
    smoke: mark test as part of smoke profile (minimal plugins, no parallel)
    unit: mark test as a unit test subset
    allow_real_coverage_artifacts: opt-in to exercising real coverage artifact helpers during tests
    apispec-generation: mark test as related to API specification generation
    code-analysis: mark test as related to code analysis functionality
    dbschema-generation: mark test as related to database schema generation
    docker: mark test as requiring Docker
    docs-generation: mark test as related to documentation generation
    fast: mark test as fast (execution time < 1s)
    gui: mark test as requiring GUI or optional UI extras (NiceGUI/DearPyGUI)
    ingest: mark test as related to project ingestion functionality
    integration: mark test as an integration test
    isolation: mark test as requiring isolation (should be run separately from other tests)
    manifest-analysis: mark test as related to manifest analysis functionality
    manifest-validation: mark test as related to manifest validation
    medium: mark test as medium speed (execution time between 1s and 5s)
    memory_intensive: mark test as using significant memory
    metadata-validation: mark test as related to metadata validation
    no_network: mark test as not performing network access
    performance: mark test as a performance test
    property: mark property-based test (opt-in via DEVSYNTH_PROPERTY_TESTING)
    refactor: mark test as related to refactoring functionality
    reqid-cli-overhaul-pseudocode: requirement ID marker
    reqid-cli-ui-improvements: requirement ID marker
    reqid-delimiting-recursion-algorithms: requirement ID marker
    reqid-dialectical-reasoning-impact-memory-persistence: requirement ID marker
    reqid-document-generator-enhancement-requirements: requirement ID marker
    reqid-documentation-plan: requirement ID marker
    reqid-edrr-cycle-specification: requirement ID marker
    reqid-edrr-framework-integration-summary: requirement ID marker
    reqid-edrr-phase-recovery-threshold-helpers: requirement ID marker
    reqid-edrr-reasoning-loop-integration: requirement ID marker
    reqid-edrr-recursion-termination: requirement ID marker
    reqid-end-to-end-deployment: requirement ID marker
    reqid-generated-test-execution-failure: requirement ID marker
    reqid-hybrid-memory-architecture: requirement ID marker
    reqid-index: requirement ID marker
    reqid-integration-test-generation: requirement ID marker
    reqid-lmstudio-integration: requirement ID marker
    reqid-memory-optional-tinydb-dependency: requirement ID marker
    reqid-metrics-system: requirement ID marker
    reqid-mvuu-config: requirement ID marker
    reqid-nicegui-interface: requirement ID marker
    reqid-recursive-edrr-pseudocode: requirement ID marker
    reqid-run-tests-maxfail-option: requirement ID marker
    reqid-spec-template: requirement ID marker
    reqid-test-generation-multi-module: requirement ID marker
    reqid-tiered-cache-validation: requirement ID marker
    reqid-unified-configuration-loader: requirement ID marker
    reqid-uxbridge-extension: requirement ID marker
    reqid-verify-test-markers-performance: requirement ID marker
    reqid-webui-core: requirement ID marker
    reqid-webui-detailed-spec: requirement ID marker
    reqid-webui-diagnostics-audit-logs: requirement ID marker
    reqid-webui-pseudocode: requirement ID marker
    reqid-webui-spec: requirement ID marker
    reqid-wsde-interaction-specification: requirement ID marker
    reqid-wsde-role-progression-memory: requirement ID marker
    requires_llm_provider: mark test as requiring an LLM provider
    requirements-management: mark test as related to requirements management
    resource_anthropic: derived marker for selecting Anthropic-gated tests (auto-added)
    resource_chromadb: derived marker for selecting ChromaDB-gated tests (auto-added)
    resource_cli: derived marker for selecting CLI-gated tests (auto-added)
    resource_codebase: derived marker for selecting codebase-dependent tests (auto-added)
    resource_duckdb: derived marker for selecting DuckDB-gated tests (auto-added)
    resource_faiss: derived marker for selecting FAISS-gated tests (auto-added)
    resource_kuzu: derived marker for selecting Kuzu-gated tests (auto-added)
    resource_lmdb: derived marker for selecting LMDB-gated tests (auto-added)
    resource_lmstudio: derived marker for selecting LM Studio-gated tests (auto-added)
    resource_openai: derived marker for selecting OpenAI-gated tests (auto-added)
    resource_rdflib: derived marker for selecting RDFLib-gated tests (auto-added)
    resource_test_resource: derived marker for selecting test resource-gated tests (auto-added)
    resource_tinydb: derived marker for selecting TinyDB-gated tests (auto-added)
    resource_webui: derived marker for selecting WebUI-gated tests (auto-added)
    run_pipeline: mark test as related to pipeline execution
    security-audit: mark test as related to security audit functionality
    slow: mark test as slow (execution time > 5s)
    smoke: mark test as part of smoke profile (minimal plugins, no parallel)
    test-metrics: mark test as related to test metrics functionality
    test_metrics: alias for test metrics functionality
    unit: mark test as a unit test subset
    webapp-generation: mark test as related to web application generation
    

# Note on running isolation tests:
# Tests marked with @pytest.mark.isolation should be run separately from other tests.
# To run only isolation tests: pytest -m isolation
# To run all tests except isolation tests: pytest -m "not isolation"
# Configure asyncio mode for pytest-asyncio
asyncio_mode = strict
# BDD features base directory - using pytest-bdd 8.1.0 compatible format
bdd_features_base_dir = tests/behavior/features
# Load test categorization plugin
python_files = test_*.py conftest.py conftest_extensions.py

