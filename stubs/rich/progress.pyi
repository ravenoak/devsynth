from __future__ import annotations

from contextlib import AbstractContextManager
from typing import Any

class Progress(AbstractContextManager["Progress"]):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __enter__(self) -> Progress: ...
    def __exit__(self, exc_type, exc: BaseException | None, tb) -> bool | None: ...
    def add_task(self, description: str, *args: Any, **kwargs: Any) -> Any: ...
    def update(self, task_id: Any, *args: Any, **kwargs: Any) -> None: ...
    def stop(self) -> None: ...

class SpinnerColumn:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class TextColumn:
    def __init__(self, text_format: str, **kwargs: Any) -> None: ...
