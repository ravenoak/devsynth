from __future__ import annotations

from contextlib import AbstractContextManager
from typing import Any, ContextManager, Iterable, Protocol, Sequence, TypeVar

RenderableType = Any

class _StatusContext(AbstractContextManager[object]):
    def __enter__(self) -> object: ...
    def __exit__(self, exc_type, exc: BaseException | None, tb) -> bool | None: ...

class Console:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def print(self, *objects: object, **kwargs: Any) -> None: ...
    def log(self, *objects: object, **kwargs: Any) -> None: ...
    def rule(self, *args: Any, **kwargs: Any) -> None: ...
    def status(self, *args: Any, **kwargs: Any) -> _StatusContext: ...
    def input(self, *args: Any, **kwargs: Any) -> str: ...
    def clear(self) -> None: ...
