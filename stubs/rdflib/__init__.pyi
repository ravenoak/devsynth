from typing import Any, Iterable, Iterator, Tuple

class Graph:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def parse(self, *args: Any, **kwargs: Any) -> "Graph": ...
    def serialize(self, *args: Any, **kwargs: Any) -> str: ...
    def bind(self, prefix: str, namespace: Any) -> None: ...
    def triples(self, pattern: Tuple[Any, Any, Any]) -> Iterator[Tuple[Any, Any, Any]]: ...
    def add(self, triple: Tuple[Any, Any, Any]) -> None: ...

class URIRef(str): ...
class Literal(str): ...
class Namespace:
    def __init__(self, uri: str) -> None: ...

class OWL:
    TransitiveProperty: Any

class RDF:
    type: Any

__all__ = ["Graph", "URIRef", "Literal", "Namespace", "OWL", "RDF"]
