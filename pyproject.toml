[tool.poetry]
name = "devsynth"
version = "0.1.0"
description = "DevSynth project"
authors = ["DevSynth Team"]
readme = "README.md"
packages = [{include = "devsynth", from = "src"}]

[tool.poetry.dependencies]
python = "<3.13,>=3.12"
typer = "0.15.4"
rich = "13.9.4"
pydantic = "2.11.5"
pydantic-settings = "2.9.1"
langgraph = "0.4.7"
langchain = "0.3.25"
tiktoken = {version = "0.9.0", optional = true}
networkx = "3.4.2"
langchain-openai = "0.3.18"
langchain-community = "0.3.24"
openai = "1.86.0"
toml = "0.10.2"
requests = "2.32.3"
fastapi = {version = "0.115.14", optional = true}
tinydb = {version = "4.8.2", optional = true}
duckdb = {version = "1.3.0", optional = true}
lmdb = {version = "1.6.2", optional = true}
faiss-cpu = {version = "1.11.0", optional = true}
rdflib = "7.1.4"
astor = {version = "0.8.1", optional = true}
argon2-cffi = "25.1.0"
cryptography = "45.0.4"
prometheus-client = {version = "0.20.0", optional = true}
streamlit = {version = "1.32.0", optional = true}
httpx = {version = "0.28.1", optional = true}
chromadb = {version = "1.0.15", optional = true}
kuzu = {version = "0.10.0", optional = true}
numpy = {version = "1.26.4", optional = true}
torch = {version = "2.7.1", optional = true}
transformers = {version = "4.53.0", optional = true}
nvidia-cublas-cu12 = {version = "12.6.4.1", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-cuda-cupti-cu12 = {version = "12.6.80", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-cuda-nvrtc-cu12 = {version = "12.6.77", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-cuda-runtime-cu12 = {version = "12.6.77", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-cudnn-cu12 = {version = "9.5.1.17", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-cufft-cu12 = {version = "11.3.0.4", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-cufile-cu12 = {version = "1.11.1.6", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-curand-cu12 = {version = "10.3.7.77", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-cusolver-cu12 = {version = "11.7.1.2", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-cusparse-cu12 = {version = "12.5.4.2", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-cusparselt-cu12 = {version = "0.6.3", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-nccl-cu12 = {version = "2.26.2", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-nvjitlink-cu12 = {version = "12.6.85", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-nvtx-cu12 = {version = "12.6.77", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
pyyaml = "6.0.2"
tqdm = "4.67.1"
lmstudio = {version = "1.4.1", optional = true}

[tool.poetry.group.dev.dependencies]
responses = "0.25.7"
pytest = "8.4.1"
pytest-bdd = "8.1.0"
pytest-cov = "6.2.1"
pytest-benchmark = "5.1.0"
pytest-mock = "3.14.1"
pytest-xdist = "3.7.0"
black = "25.1.0"
isort = "6.0.1"
pre-commit = "4.2.0"
psutil = "7.0.0"
mypy = {version = "1.17.0", optional = true}
tinydb = "4.8.2"
faker = "37.4.2"
ipywidgets = "8.1.7"
trio = "0.30.0"
pytest-asyncio = "1.0.0"
httpx = "0.28.1"
uvicorn = "0.35.0"
pytest-html = "^4.1.1"
bandit = "^1.8.6"
safety = "^3.2.3"
hypothesis = "6.100.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "1.6.1"
mkdocs-material = "9.6.14"
mkdocstrings-python = "1.16.11"
mkdocs-gen-files = "0.5.0"
mkdocs-include-markdown-plugin = "7.1.5"
mkdocs-typer2 = "0.1.4"
mkdocs-literate-nav = "0.6.2"
mkdocs-section-index = "0.3.10"

[tool.poetry.extras]
# docs: build the project documentation
# minimal: baseline runtime requirements without heavy optional dependencies
# retrieval: enables vector retrieval support via kuzu and faiss
# chromadb: use chromadb as the vector store
docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings-python",
    "mkdocs-gen-files",
    "mkdocs-include-markdown-plugin",
    "mkdocs-typer2",
    "mkdocs-literate-nav",
    "mkdocs-section-index",
    "hypothesis",
]
minimal = [
    "typer",
    "rich",
    "pydantic",
    "pydantic-settings",
    "langgraph",
    "tiktoken",
    "networkx",
    "toml",
    "pyyaml",
    "requests",
    "tinydb",
    "duckdb",
    "lmdb",
    "rdflib",
    "astor",
    "httpx",
]

retrieval = ["kuzu", "faiss-cpu"]
chromadb = ["chromadb"]
lmstudio = ["lmstudio"]
memory = ["tinydb", "duckdb", "lmdb", "kuzu", "faiss-cpu", "chromadb", "numpy"]
llm = ["tiktoken", "httpx"]
gpu = [
    "torch",
    "nvidia-cublas-cu12",
    "nvidia-cuda-cupti-cu12",
    "nvidia-cuda-nvrtc-cu12",
    "nvidia-cuda-runtime-cu12",
    "nvidia-cudnn-cu12",
    "nvidia-cufft-cu12",
    "nvidia-cufile-cu12",
    "nvidia-curand-cu12",
    "nvidia-cusolver-cu12",
    "nvidia-cusparse-cu12",
    "nvidia-cusparselt-cu12",
    "nvidia-nccl-cu12",
    "nvidia-nvjitlink-cu12",
    "nvidia-nvtx-cu12",
]
offline = ["transformers"]
api = ["fastapi", "prometheus-client"]
webui = ["streamlit"]
tests = ["fastapi", "httpx", "tinydb", "duckdb", "lmdb", "astor"]
dev = [
    "responses",
    "pytest",
    "pytest-bdd",
    "pytest-cov",
    "pytest-mock",
    "pytest-xdist",
    "black",
    "isort",
    "pre-commit",
    "psutil",
    "mypy",
    "pydantic-settings",
    "toml",
    "pyyaml",
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings-python",
    "mkdocs-gen-files",
    "mkdocs-include-markdown-plugin",
    "mkdocs-typer2",
    "mkdocs-literate-nav",
    "mkdocs-section-index",
]

[tool.poetry.scripts]
devsynth = "devsynth.adapters.cli:run_cli"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.black]
line-length = 88
target-version = ["py312"]

[tool.isort]
profile = "black"
line_length = 88

[tool.devsynth]
project_root = "."
language = "python"
directories = {source = ["src"], tests = ["tests"], docs = ["docs"]}
features = {}

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
