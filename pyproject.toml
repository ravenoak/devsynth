[tool.poetry]
name = "devsynth"
version = "0.1.0a1"
description = "DevSynth project"
authors = ["DevSynth Team"]
license = "MIT"
readme = "README.md"
packages = [{include = "devsynth", from = "src"}]
# Explicitly control packaged files for sdist/wheel hygiene
include = [
    "LICENSE",
    "README.md",
    # Ship scaffolding templates for users; lightweight and helpful
    "templates/**",
]
exclude = [
    # Do not ship tests in the wheel/sdist
    "tests/**",
    # Local and CI artifacts are excluded implicitly by .gitignore; keep explicit here for clarity
    "test_reports/**",
    "docs/archived/**",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent"
]

[tool.poetry.dependencies]
python = "<3.13,>=3.12"
typer = "^0.17.4"
rich = "*"
pydantic = "*"
pydantic-settings = "*"
langgraph = "*"
langchain = "*"
tiktoken = {version = "*", optional = true}
networkx = "*"
langchain-openai = "*"
langchain-community = "*"
openai = "*"
toml = "*"
requests = "*"
# FastAPI 0.116.x remains the tested range while Starlette advances to the
# 0.47.x compatibility band documented in the upstream 0.116.2 release notes.
# The sitecustomize shim continues to patch WebSocketDenialResponse to avoid
# the Python 3.12 TestClient MRO regression (see
# issues/run-tests-smoke-fast-fastapi-starlette-mro.md and docs/plan.md ยง
# Compatibility mitigation).
fastapi = {version = ">=0.116.2,<0.117", optional = true}
# Align with Starlette 0.47.3+, capturing the Python 3.12 coroutine detection
# fix while staying below 0.48.0 until RFC 9110 renames and broader changes are
# validated against DevSynth's API surface. Tracked in
# issues/run-tests-smoke-fast-fastapi-starlette-mro.md.
starlette = "<0.47"
tinydb = {version = "*", optional = true}
duckdb = {version = "*", optional = true}
lmdb = {version = "*", optional = true}
faiss-cpu = {version = "*", optional = true, markers = "platform_system != 'Darwin' or platform_machine == 'arm64'"}
rdflib = "*"
astor = {version = "*", optional = true}
argon2-cffi = "*"
cryptography = "*"
prometheus-client = {version = "*", optional = true}
streamlit = {version = "*", optional = true}
httpx = {version = "*", optional = true}
chromadb = {version = "*", optional = true, markers = "platform_system != 'Darwin' or platform_machine == 'arm64'"}
kuzu = {version = "*", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
numpy = "*"
transformers = {version = "*", optional = true}
# GUI dependencies
dearpygui = {version = "*", optional = true}
pyyaml = "*"
tqdm = "*"
lmstudio = {version = "*", optional = true}
hypothesis = "*"
filelock = "*"
cachetools = "*"
gitpython = "*"
nicegui = "*"
jsonschema = "*"

[tool.poetry.group.dev.dependencies]
responses = "*"
pytest = "*"
pytest-bdd = "*"
pytest-cov = "*"
pytest-benchmark = "*"
pytest-mock = "*"
pytest-xdist = "*"
pytest-rerunfailures = "*"
black = "*"
isort = "*"
flake8 = "*"
pre-commit = "*"
psutil = "*"
mypy = "*"
tinydb = "*"
faker = "*"
ipywidgets = "*"
trio = "*"
pytest-asyncio = "*"
httpx = "*"
uvicorn = "*"
pytest-html = "*"
bandit = "*"
safety = "*"
prometheus-client = "*"
freezegun = "*"
types-PyYAML = "^6.0.12.20250915"
types-jsonschema = "^4.25.1.20250822"
types-requests = "*"
types-networkx = "*"
types-tqdm = "*"
types-pytest = {path = "stubs/types-pytest", develop = true}
types-pytest-bdd = {path = "stubs/types-pytest-bdd", develop = true}
types-responses = {path = "stubs/types-responses", develop = true}
types-freezegun = "*"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "*"
mkdocs-material = "*"
mkdocstrings-python = "*"
mkdocs-gen-files = "*"
mkdocs-include-markdown-plugin = "*"
mkdocs-typer2 = "*"
mkdocs-literate-nav = "*"
mkdocs-section-index = "*"

[tool.poetry.extras]
# docs: build the project documentation
# minimal: baseline runtime requirements without heavy optional dependencies
# retrieval: enables vector retrieval support via kuzu and faiss
# chromadb: use chromadb as the vector store
# gui: install Dear PyGui for a desktop GUI
docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings-python",
    "mkdocs-gen-files",
    "mkdocs-include-markdown-plugin",
    "mkdocs-typer2",
    "mkdocs-literate-nav",
    "mkdocs-section-index",
    "hypothesis",
]
minimal = [
    "typer",
    "rich",
    "pydantic",
    "pydantic-settings",
    "langgraph",
    "networkx",
    "toml",
    "pyyaml",
    "requests",
]

retrieval = ["kuzu", "faiss-cpu"]
chromadb = ["chromadb", "tiktoken"]
lmstudio = ["lmstudio"]
memory = ["tinydb", "duckdb", "lmdb", "kuzu", "faiss-cpu", "chromadb", "numpy"]
llm = ["tiktoken", "httpx"]
offline = ["transformers"]
api = ["fastapi", "prometheus-client"]
webui = ["streamlit"]
webui_nicegui = ["nicegui"]
gui = ["dearpygui"]
tests = ["fastapi", "httpx", "tinydb", "duckdb", "lmdb", "astor", "pytest-rerunfailures"]
dev = [
    "responses",
    "pytest",
    "pytest-bdd",
    "pytest-cov",
    "pytest-mock",
    "pytest-xdist",
    "black",
    "isort",
    "pre-commit",
    "psutil",
    "mypy",
    "pydantic-settings",
    "toml",
    "pyyaml",
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings-python",
    "mkdocs-gen-files",
    "mkdocs-include-markdown-plugin",
    "mkdocs-typer2",
    "mkdocs-literate-nav",
    "mkdocs-section-index",
]

[tool.poetry.scripts]
devsynth = "devsynth.adapters.cli.typer_adapter:run_cli"
mvuu-dashboard = "devsynth.application.cli.commands.mvuu_dashboard_cmd:mvuu_dashboard_cmd"

[tool.mypy]
mypy_path = [
    "src",
    "stubs/fastapi",
    "stubs/prometheus_client",
    "stubs/typer",
    "stubs/yaml",
    "stubs/devsynth",
    "stubs/streamlit",
    "stubs/types-pytest",
    "stubs/types-pytest-bdd",
    "stubs/types-responses",
    "stubs/types-requests",
    "stubs/toml",
    "stubs/chromadb",
    "stubs/boto3",
    "stubs/botocore",
    "stubs/rdflib",
    "stubs/jsonschema",
    "stubs/astor",
    "stubs/pydantic",
    "stubs/pydantic_settings",
    "stubs/coverage",
    "stubs/rich",
    "stubs/argon2",
    "stubs/tiktoken",
    "stubs/networkx",
    "stubs/numpy",
    "stubs/faiss",
    "stubs/lmdb",
    "stubs/tinydb",
    "stubs/kuzu",
]
python_version = "3.12"
warn_return_any = true
# Keep third-party imports at `skip` even after stub packages land to limit
# type-checking churn while we continue tightening module-level overrides.
follow_imports = "skip"
exclude = [
  # Exclude nothing at path-level; use per-module overrides below.
]
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = "tests._typing_utils"
follow_imports = "normal"

[[tool.mypy.overrides]]
module = [
  "rdflib",
  "rdflib.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "devsynth.domain.interfaces.memory"
follow_imports = "normal"
ignore_errors = false

[tool.black]
line-length = 88
target-version = ["py312"]

[tool.isort]
profile = "black"
line_length = 88

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
per-file-ignores = [
  # Allow long docstrings and BDD steps in behavior tests; ignore common harmless scaffolding issues
  "tests/behavior/*.py: E501,F401,E402",
  "tests/behavior/steps/*.py: E501,F401,E402,F811",
  "tests/behavior/test_cli_ux_enhancements.py: F401",
  # Adapters contain deliberate import ordering and long lines due to external API constraints; documented in code comments
  "src/devsynth/adapters/agents/agent_adapter.py: E402,F401,E501",
  "src/devsynth/adapters/chromadb_memory_store.py: E501",
  "src/devsynth/application/edrr/coordinator/core.py: E501",
]

[tool.devsynth]
project_root = "."
language = "python"
directories = {source = ["src"], tests = ["tests"], docs = ["docs"]}
features = {}

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "devsynth.core.mvu.*"
ignore_errors = false

[[tool.mypy.overrides]]
module = [
  "devsynth.agents.sandbox",
  "devsynth.logging_setup",
  "devsynth.application.memory.circuit_breaker",
  "devsynth.application.code_analysis.ast_transformer",
]
ignore_errors = false
disallow_untyped_defs = true
disallow_incomplete_defs = true

# TODO(strict-typing-roadmap): Enumerate the remaining packages that fail
# strict typing because they depend on dynamic dataclass factories,
# third-party SDKs without usable stubs, or runtime-only protocol
# implementations. Track the cleanup in issues/strict-typing-roadmap.md and
# the per-package follow-ups under issues/restore-strict-typing-*.md.
[[tool.mypy.overrides]]
module = [
  "devsynth.adapters.*",
  "devsynth.agents.*",
  "devsynth.application.*",
  "devsynth.cli",
  "devsynth.config.*",
  "devsynth.consensus",
  "devsynth.core.*",
  "devsynth.domain.*",
  "devsynth.fallback",
  "devsynth.integrations.*",
  "devsynth.interface.*",
  "devsynth.logger",
  "devsynth.memory.*",
  "devsynth.metrics",
  "devsynth.methodology.*",
  "devsynth.observability.*",
  "devsynth.orchestration.*",
  "devsynth.ports.*",
  "devsynth.schemas.*",
  "devsynth.security.*",
  "devsynth.testing.*",
  "devsynth.utils.*",
]
ignore_errors = true

[[tool.mypy.overrides]]
module = ["chromadb", "chromadb.*"]
ignore_missing_imports = true

# === Pytest Configuration ===
# Consolidated from pytest.ini for centralized configuration management
[tool.pytest.ini_options]
# === Core Configuration ===
# Run tests from the tests directory only to prevent template collection
testpaths = ["tests"]
norecursedirs = ["templates", ".hypothesis", ".pytest_cache", "__pycache__", ".git"]

# === Default Options ===
# Optimized for fast feedback with selective execution
# Override with PYTEST_ADDOPTS or -m for different test sets
addopts = [
    "-p", "no:benchmark",
    "--cov=src/devsynth",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=json:test_reports/coverage.json",
    # Fail runs below 90% aggregate coverage. Override with
    #   PYTEST_ADDOPTS="--cov-fail-under=<value>" or
    #   DEVSYNTH_COV_FAIL_UNDER=<value>
    # when intentionally running focused suites (e.g., smoke triage).
    "--cov-fail-under=90",
    "-m", "not slow and not gui and not memory_intensive",
    "--strict-markers",
    "--strict-config",
    "-ra"
]

markers = [
    # Resource availability markers
    "requires_resource(name): mark test as requiring an external resource",
    "resource_anthropic: derived marker for selecting Anthropic-gated tests (auto-added)",
    "resource_chromadb: derived marker for selecting ChromaDB-gated tests (auto-added)",
    "resource_cli: derived marker for selecting CLI-gated tests (auto-added)",
    "resource_codebase: derived marker for selecting codebase-dependent tests (auto-added)",
    "resource_duckdb: derived marker for selecting DuckDB-gated tests (auto-added)",
    "resource_faiss: derived marker for selecting FAISS-gated tests (auto-added)",
    "resource_kuzu: derived marker for selecting Kuzu-gated tests (auto-added)",
    "resource_lmdb: derived marker for selecting LMDB-gated tests (auto-added)",
    "resource_lmstudio: derived marker for selecting LM Studio-gated tests (auto-added)",
    "resource_memory: derived marker for selecting memory-gated tests (auto-added)",
    "resource_openai: derived marker for selecting OpenAI-gated tests (auto-added)",
    "resource_rdflib: derived marker for selecting RDFLib-gated tests (auto-added)",
    "resource_test_resource: derived marker for selecting test resource-gated tests (auto-added)",
    "resource_tinydb: derived marker for selecting TinyDB-gated tests (auto-added)",
    "resource_webui: derived marker for selecting WebUI-gated tests (auto-added)",
    "requires_llm_provider: mark test as requiring an LLM provider",
    
    # Speed markers (exactly one required per test)
    "fast: mark test as fast (execution time < 1s)",
    "medium: mark test as medium speed (execution time between 1s and 5s)",
    "slow: mark test as slow (execution time > 5s)",
    
    # Test type markers
    "unit: mark test as a unit test subset",
    "integration: mark test as an integration test",
    "integtest: mark integration-provider smoke tests",
    "performance: mark test as a performance test",
    "property: mark property-based test (opt-in via DEVSYNTH_PROPERTY_TESTING)",
    "smoke: mark test as part of smoke profile (minimal plugins, no parallel)",
    
    # Execution context markers
    "isolation: mark test as requiring isolation (should be run separately from other tests)",
    "gui: mark test as requiring GUI or optional UI extras (NiceGUI/DearPyGUI)",
    "docker: mark test as requiring Docker",
    "memory_intensive: mark test as using significant memory",
    "no_network: mark test as not performing network access",
    
    # Functional area markers
    "apispec-generation: mark test as related to API specification generation",
    "code-analysis: mark test as related to code analysis functionality",
    "dbschema-generation: mark test as related to database schema generation",
    "docs-generation: mark test as related to documentation generation",
    "ingest: mark test as related to project ingestion functionality",
    "manifest-analysis: mark test as related to manifest analysis functionality",
    "manifest-validation: mark test as related to manifest validation",
    "metadata-validation: mark test as related to metadata validation",
    "refactor: mark test as related to refactoring functionality",
    "requirements-management: mark test as related to requirements management",
    "test-metrics: mark test as related to test metrics functionality",
    "test_metrics: alias for test metrics functionality",
    "webapp-generation: mark test as related to web application generation",
    
    # Special markers
    "allow_real_coverage_artifacts: opt-in to exercising real coverage artifact helpers during tests",
    "run_pipeline: mark test as related to pipeline execution",
    "security-audit: mark test as related to security audit functionality",
    "cli: mark test as part of the CLI verification suite",
]

# Configure asyncio mode for pytest-asyncio
asyncio_mode = "strict"

# BDD features base directory - using pytest-bdd 8.1.0 compatible format
bdd_features_base_dir = "tests/behavior/features"

# Load test categorization plugin
python_files = ["test_*.py", "conftest.py", "conftest_extensions.py"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
