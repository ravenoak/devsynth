[tool.poetry]
name = "devsynth"
version = "0.1.0a1"
description = "DevSynth project"
authors = ["DevSynth Team"]
license = "MIT"
readme = "README.md"
packages = [{include = "devsynth", from = "src"}]
# Explicitly control packaged files for sdist/wheel hygiene
include = [
    "LICENSE",
    "README.md",
    # Ship scaffolding templates for users; lightweight and helpful
    "templates/**",
]
exclude = [
    # Do not ship tests in the wheel/sdist
    "tests/**",
    # Local and CI artifacts are excluded implicitly by .gitignore; keep explicit here for clarity
    "test_reports/**",
    "docs/archived/**",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent"
]

[tool.poetry.dependencies]
python = "<3.13,>=3.12"
typer = "^0.17.4"
rich = "*"
pydantic = "*"
pydantic-settings = "*"
langgraph = "*"
langchain = "*"
tiktoken = {version = "*", optional = true}
networkx = "*"
langchain-openai = "*"
langchain-community = "*"
openai = "*"
toml = "*"
requests = "*"
# FastAPI 0.116.x remains the tested range while Starlette advances to the
# 0.47.x compatibility band documented in the upstream 0.116.2 release notes.
# The sitecustomize shim continues to patch WebSocketDenialResponse to avoid
# the Python 3.12 TestClient MRO regression (see
# issues/run-tests-smoke-fast-fastapi-starlette-mro.md and docs/plan.md §
# Compatibility mitigation).
fastapi = {version = ">=0.116.2,<0.117", optional = true}
# Align with Starlette 0.47.3+, capturing the Python 3.12 coroutine detection
# fix while staying below 0.48.0 until RFC 9110 renames and broader changes are
# validated against DevSynth's API surface. Tracked in
# issues/run-tests-smoke-fast-fastapi-starlette-mro.md.
starlette = "<0.47"
tinydb = {version = "*", optional = true}
duckdb = {version = "*", optional = true}
lmdb = {version = "*", optional = true}
faiss-cpu = {version = "*", optional = true, markers = "platform_system != 'Darwin' or platform_machine == 'arm64'"}
rdflib = "*"
astor = {version = "*", optional = true}
argon2-cffi = "*"
cryptography = "*"
prometheus-client = {version = "*", optional = true}
streamlit = {version = "*", optional = true}
httpx = {version = "*", optional = true}
chromadb = {version = "*", optional = true, markers = "platform_system != 'Darwin' or platform_machine == 'arm64'"}
kuzu = {version = "*", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
numpy = "*"
transformers = {version = "*", optional = true}
# GUI dependencies
dearpygui = {version = "*", optional = true}
pyyaml = "*"
tqdm = "*"
lmstudio = {version = "*", optional = true}
hypothesis = "*"
filelock = "*"
cachetools = "*"
gitpython = "*"
nicegui = "*"
jsonschema = "*"

[tool.poetry.group.dev.dependencies]
responses = "*"
pytest = "*"
pytest-bdd = "*"
pytest-cov = "*"
pytest-benchmark = "*"
pytest-mock = "*"
pytest-xdist = "*"
pytest-rerunfailures = "*"
black = "*"
isort = "*"
flake8 = "*"
pre-commit = "*"
psutil = "*"
mypy = "*"
tinydb = "*"
faker = "*"
ipywidgets = "*"
trio = "*"
pytest-asyncio = "*"
httpx = "*"
uvicorn = "*"
pytest-html = "*"
bandit = "*"
safety = "*"
prometheus-client = "*"
freezegun = "*"
types-pyyaml = "^6.0.12.20250915"
types-jsonschema = "^4.25.1.20250822"
types-requests = "*"
types-networkx = "*"
types-tqdm = "*"
types-pytest = {path = "stubs/types-pytest", develop = true}
types-pytest-bdd = {path = "stubs/types-pytest-bdd", develop = true}
types-responses = {path = "stubs/types-responses", develop = true}
types-freezegun = "*"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "*"
mkdocs-material = "*"
mkdocstrings-python = "*"
mkdocs-gen-files = "*"
mkdocs-include-markdown-plugin = "*"
mkdocs-typer2 = "*"
mkdocs-literate-nav = "*"
mkdocs-section-index = "*"

[tool.poetry.extras]
# docs: build the project documentation
# minimal: baseline runtime requirements without heavy optional dependencies
# retrieval: enables vector retrieval support via kuzu and faiss
# chromadb: use chromadb as the vector store
# gui: install Dear PyGui for a desktop GUI
docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings-python",
    "mkdocs-gen-files",
    "mkdocs-include-markdown-plugin",
    "mkdocs-typer2",
    "mkdocs-literate-nav",
    "mkdocs-section-index",
    "hypothesis",
]
minimal = [
    "typer",
    "rich",
    "pydantic",
    "pydantic-settings",
    "langgraph",
    "networkx",
    "toml",
    "pyyaml",
    "requests",
]

retrieval = ["kuzu", "faiss-cpu"]
chromadb = ["chromadb", "tiktoken"]
lmstudio = ["lmstudio"]
memory = ["tinydb", "duckdb", "lmdb", "kuzu", "faiss-cpu", "chromadb", "numpy"]
llm = ["tiktoken", "httpx"]
offline = ["transformers"]
api = ["fastapi", "prometheus-client"]
webui = ["streamlit"]
webui_nicegui = ["nicegui"]
gui = ["dearpygui"]
tests = ["fastapi", "httpx", "tinydb", "duckdb", "lmdb", "astor", "pytest-rerunfailures"]
dev = [
    "responses",
    "pytest",
    "pytest-bdd",
    "pytest-cov",
    "pytest-mock",
    "pytest-xdist",
    "black",
    "isort",
    "pre-commit",
    "psutil",
    "mypy",
    "pydantic-settings",
    "toml",
    "pyyaml",
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings-python",
    "mkdocs-gen-files",
    "mkdocs-include-markdown-plugin",
    "mkdocs-typer2",
    "mkdocs-literate-nav",
    "mkdocs-section-index",
]

[tool.poetry.scripts]
devsynth = "devsynth.adapters.cli.typer_adapter:run_cli"
mvuu-dashboard = "devsynth.application.cli.commands.mvuu_dashboard_cmd:mvuu_dashboard_cmd"

[tool.mypy]
mypy_path = [
    "src",
    "stubs/devsynth",
    "stubs/streamlit",
    "stubs/types-pytest",
    "stubs/types-pytest-bdd",
    "stubs/types-responses",
]
python_version = "3.12"
warn_return_any = true
# Keep third-party imports at `skip` even after stub packages land to limit
# type-checking churn while we continue tightening module-level overrides.
follow_imports = "skip"
exclude = [
  # Exclude nothing at path-level; use per-module overrides below.
]
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = "tests._typing_utils"
follow_imports = "normal"

[tool.black]
line-length = 88
target-version = ["py312"]

[tool.isort]
profile = "black"
line_length = 88

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
per-file-ignores = [
  # Allow long docstrings and BDD steps in behavior tests; ignore common harmless scaffolding issues
  "tests/behavior/*.py: E501,F401,E402",
  "tests/behavior/steps/*.py: E501,F401,E402,F811",
  "tests/behavior/test_cli_ux_enhancements.py: F401",
  # Adapters contain deliberate import ordering and long lines due to external API constraints; documented in code comments
  "src/devsynth/adapters/agents/agent_adapter.py: E402,F401,E501",
  "src/devsynth/adapters/chromadb_memory_store.py: E501",
  "src/devsynth/application/edrr/coordinator/core.py: E501",
]

[tool.devsynth]
project_root = "."
language = "python"
directories = {source = ["src"], tests = ["tests"], docs = ["docs"]}
features = {}

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "devsynth.core.mvu.*"
ignore_errors = false

# Phase 1 – Core runtime tightening (due 2025-11-15; owner: Core Platform – Miguel Sato; see docs/typing/strictness.md §Phase 1 commitments)
[[tool.mypy.overrides]]
module = [
  "devsynth.core.config_loader",
  "devsynth.core.workflows",
  "devsynth.agents.base_agent_graph",
  "devsynth.agents.sandbox",
  "devsynth.agents.wsde_team_coordinator",
  "devsynth.agents.tools",
  "devsynth.memory.sync_manager",
  "devsynth.api",
]
ignore_errors = true

# Phase 1 – Adapter backlog (due 2025-11-15; owner: Integrations Team – Alex Chen; see docs/typing/strictness.md §Phase 1 commitments)
[[tool.mypy.overrides]]
module = [
  "devsynth.adapters.agents.agent_adapter",
  "devsynth.adapters.chromadb_memory_store",
  "devsynth.adapters.cli.typer_adapter",
  "devsynth.adapters.github_project",
  "devsynth.adapters.jira_adapter",
  "devsynth.adapters.kuzu_memory_store",
  "devsynth.adapters.llm.llm_adapter",
  "devsynth.adapters.llm.mock_llm_adapter",
  "devsynth.adapters.memory.chroma_db_adapter",
  "devsynth.adapters.memory.kuzu_adapter",
  "devsynth.adapters.memory.memory_adapter",
  "devsynth.adapters.memory.sync_manager",
  "devsynth.adapters.onnx_runtime_adapter",
  "devsynth.adapters.orchestration.langgraph_adapter",
  "devsynth.adapters.provider_system",
]
ignore_errors = true

# Phase 3 – Application workflows (due 2026-02-15; owner: Applications Group – Lara Singh; see docs/typing/strictness.md §Phase 3 commitments)
[[tool.mypy.overrides]]
module = [
  "devsynth.application.agents.agent_memory_integration",
  "devsynth.application.agents.base",
  "devsynth.application.agents.test",
  "devsynth.application.agents.wsde_memory_integration",
  "devsynth.application.cli.autocomplete",
  "devsynth.application.cli.cli_commands",
  "devsynth.application.cli.command_output_formatter",
  "devsynth.application.cli.commands.align_cmd",
  "devsynth.application.cli.commands.alignment_metrics_cmd",
  "devsynth.application.cli.commands.completion_cmd",
  "devsynth.application.cli.commands.config_cmd",
  "devsynth.application.cli.commands.dbschema_cmd",
  "devsynth.application.cli.commands.doctor_cmd",
  "devsynth.application.cli.commands.dpg_cmd",
  "devsynth.application.cli.commands.generate_docs_cmd",
  "devsynth.application.cli.commands.ingest_cmd",
  "devsynth.application.cli.commands.init_cmd",
  "devsynth.application.cli.commands.inspect_config_cmd",
  "devsynth.application.cli.commands.test_metrics_cmd",
  "devsynth.application.cli.commands.validate_manifest_cmd",
  "devsynth.application.cli.commands.validate_metadata_cmd",
  "devsynth.application.cli.commands.webui_cmd",
  "devsynth.application.cli.ingest_cmd",
  "devsynth.application.cli.long_running_progress",
  "devsynth.application.cli.mvu_commands",
  "devsynth.application.cli.requirements_commands",
  "devsynth.application.cli.sprint_cmd",
  "devsynth.application.cli.utils",
  "devsynth.application.cli.vcs_commands",
  "devsynth.application.collaboration",
  "devsynth.application.collaboration.WSDE",
  "devsynth.application.collaboration.agent_collaboration",
  "devsynth.application.collaboration.collaboration_memory_utils",
  "devsynth.application.collaboration.collaborative_wsde_team",
  "devsynth.application.collaboration.coordinator",
  "devsynth.application.collaboration.exceptions",
  "devsynth.application.collaboration.peer_review",
  "devsynth.application.collaboration.wsde_team_collaborative",
  "devsynth.application.collaboration.wsde_team_consensus",
  "devsynth.application.collaboration.wsde_team_extended",
  "devsynth.application.collaboration.wsde_team_task_management",
  "devsynth.application.edrr.coordinator.core",
  "devsynth.application.edrr.coordinator.persistence",
  "devsynth.application.edrr.coordinator.phase_management",
  "devsynth.application.edrr.coordinator_core",
  "devsynth.application.edrr.edrr_coordinator_enhanced",
  "devsynth.application.edrr.edrr_phase_transitions",
  "devsynth.application.edrr.manifest_parser",
  "devsynth.application.ingestion",
  "devsynth.application.llm",
  "devsynth.application.llm.lmstudio_provider",
  "devsynth.application.llm.offline_provider",
  "devsynth.application.llm.openai_provider",
  "devsynth.application.llm.provider_factory",
  "devsynth.application.llm.providers",
  "devsynth.application.orchestration.refactor_workflow",
  "devsynth.application.orchestration.workflow",
  "devsynth.application.promises.agent",
  "devsynth.application.promises.broker",
  "devsynth.application.promises.examples",
  "devsynth.application.promises.implementation",
  "devsynth.application.promises.interface",
  "devsynth.application.prompts.auto_tuning",
  "devsynth.application.prompts.prompt_efficacy",
  "devsynth.application.prompts.prompt_manager",
  "devsynth.application.prompts.prompt_reflection",
  "devsynth.application.utils.token_tracker",
]
ignore_errors = true

# Phase 4 – Memory stack (due 2026-03-15; owner: Memory Systems – Chen Wu; see docs/typing/strictness.md §Phase 4 commitments)
[[tool.mypy.overrides]]
module = [
  "devsynth.application.memory",
  "devsynth.application.memory.chromadb_store",
  "devsynth.application.memory.circuit_breaker",
  "devsynth.application.memory.context_manager",
  "devsynth.application.memory.duckdb_store",
  "devsynth.application.memory.error_logger",
  "devsynth.application.memory.faiss_store",
  "devsynth.application.memory.fallback",
  "devsynth.application.memory.json_file_store",
  "devsynth.application.memory.kuzu_store",
  "devsynth.application.memory.lmdb_store",
  "devsynth.application.memory.memory_integration",
  "devsynth.application.memory.memory_manager",
  "devsynth.application.memory.multi_layered_memory",
  "devsynth.application.memory.persistent_context_manager",
  "devsynth.application.memory.query_router",
  "devsynth.application.memory.rdflib_store",
  "devsynth.application.memory.recovery",
  "devsynth.application.memory.retry",
  "devsynth.application.memory.sync_manager",
  "devsynth.application.memory.tinydb_store",
  "devsynth.application.memory.transaction_context",
  "devsynth.application.memory.search_patterns",
  "devsynth.application.memory.vector_providers",
  "devsynth.application.memory.adapters.enhanced_graph_memory_adapter",
  "devsynth.application.memory.adapters.graph_memory_adapter",
  "devsynth.application.memory.adapters.vector_memory_adapter",
]
ignore_errors = true

# Phase 5 – Enhanced API surface (due 2026-03-31; owner: API Guild – Morgan Patel; see docs/typing/strictness.md §Phase 5 commitments)
[[tool.mypy.overrides]]
module = [
  "devsynth.interface.agentapi",
  "devsynth.interface.agentapi_enhanced",
  "devsynth.application.requirements.dialectical_reasoner",
  "devsynth.application.requirements.requirement_service",
]
ignore_errors = true

[[tool.mypy.overrides]]
module = ["chromadb", "chromadb.*"]
ignore_missing_imports = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
