[tool.poetry]
name = "devsynth"
version = "0.1.0a1"
description = "DevSynth project"
authors = ["DevSynth Team"]
license = "MIT"
readme = "README.md"
packages = [{include = "devsynth", from = "src"}]
# Explicitly control packaged files for sdist/wheel hygiene
include = [
    "LICENSE",
    "README.md",
    # Ship scaffolding templates for users; lightweight and helpful
    "templates/**",
]
exclude = [
    # Do not ship tests in the wheel/sdist
    "tests/**",
    # Local and CI artifacts are excluded implicitly by .gitignore; keep explicit here for clarity
    "test_reports/**",
    "docs/archived/**",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent"
]

[tool.poetry.dependencies]
python = "<3.13,>=3.12"
typer = "==0.16.0"
rich = "==14.1.0"
pydantic = "==2.11.7"
pydantic-settings = "==2.10.1"
langgraph = "==0.6.2"
langchain = "==0.3.27"
tiktoken = {version = "0.9.0", optional = true}
networkx = "==3.5"
langchain-openai = "==0.3.28"
langchain-community = "==0.3.27"
openai = "==1.98.0"
toml = "0.10.2"
requests = "==2.32.4"
fastapi = {version = "0.115.14", optional = true}
starlette = ">=0.47.2,<1.0.0"
tinydb = {version = "4.8.2", optional = true}
duckdb = {version = "1.3.0", optional = true}
lmdb = {version = "1.6.2", optional = true}
faiss-cpu = {version = "1.11.0.post1", optional = true, markers = "platform_system != 'Darwin' or platform_machine == 'arm64'"}
rdflib = "7.1.4"
astor = {version = "0.8.1", optional = true}
argon2-cffi = "25.1.0"
cryptography = "==45.0.5"
prometheus-client = {version = "0.20.0", optional = true}
streamlit = {version = "^1.47.1", optional = true}
httpx = {version = "0.28.1", optional = true}
chromadb = {version = "1.0.15", optional = true, markers = "platform_system != 'Darwin' or platform_machine == 'arm64'"}
kuzu = {version = "0.10.0", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
numpy = "==2.3.2"
torch = {version = "2.7.1", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
transformers = {version = "4.53.0", optional = true}
# GUI dependencies
dearpygui = {version = "^2.1", optional = true}
nvidia-cublas-cu12 = {version = "12.6.4.1", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-cuda-cupti-cu12 = {version = "12.6.80", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-cuda-nvrtc-cu12 = {version = "12.6.77", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-cuda-runtime-cu12 = {version = "12.6.77", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-cudnn-cu12 = {version = "9.5.1.17", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-cufft-cu12 = {version = "11.3.0.4", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-cufile-cu12 = {version = "1.11.1.6", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-curand-cu12 = {version = "10.3.7.77", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-cusolver-cu12 = {version = "11.7.1.2", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-cusparse-cu12 = {version = "12.5.4.2", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-cusparselt-cu12 = {version = "0.6.3", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-nccl-cu12 = {version = "2.26.2", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-nvjitlink-cu12 = {version = "12.6.85", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
nvidia-nvtx-cu12 = {version = "12.6.77", optional = true, markers = "platform_system == 'Linux' and platform_machine == 'x86_64'"}
pyyaml = "6.0.2"
tqdm = "4.67.1"
lmstudio = {version = "1.4.1", optional = true}
hypothesis = "^6.136.7"
filelock = "==3.18.0"
cachetools = "==6.1.0"
gitpython = "==3.1.43"
nicegui = "2.22.2"
jsonschema = "==4.23.0"

[tool.poetry.group.dev.dependencies]
responses = "^0.25.7"
pytest = "^8.4.1"
pytest-bdd = "^8.1.0"
pytest-cov = "^6.2.1"
pytest-benchmark = "^5.1.0"
pytest-mock = "^3.14.1"
pytest-xdist = "^3.7.0"
black = "^25.1.0"
isort = "^6.0.1"
flake8 = "^7.1.1"
pre-commit = "^4.2.0"
psutil = "^7.0.0"
mypy = "^1.17.0"
tinydb = "^4.8.2"
faker = "^37.4.2"
ipywidgets = "^8.1.7"
trio = "^0.30.0"
pytest-asyncio = "^1.0.0"
httpx = "^0.28.1"
uvicorn = "^0.35.0"
pytest-html = "^4.1.1"
bandit = "^1.8.6"
safety = "^3.2.3"
prometheus-client = "0.20.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.1"
mkdocs-material = "^9.6.14"
mkdocstrings-python = "^1.16.11"
mkdocs-gen-files = "^0.5.0"
mkdocs-include-markdown-plugin = "^7.1.5"
mkdocs-typer2 = "^0.1.4"
mkdocs-literate-nav = "^0.6.2"
mkdocs-section-index = "^0.3.10"

[tool.poetry.extras]
# docs: build the project documentation
# minimal: baseline runtime requirements without heavy optional dependencies
# retrieval: enables vector retrieval support via kuzu and faiss
# chromadb: use chromadb as the vector store
# gui: install Dear PyGui for a desktop GUI
docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings-python",
    "mkdocs-gen-files",
    "mkdocs-include-markdown-plugin",
    "mkdocs-typer2",
    "mkdocs-literate-nav",
    "mkdocs-section-index",
    "hypothesis",
]
minimal = [
    "typer",
    "rich",
    "pydantic",
    "pydantic-settings",
    "langgraph",
    "networkx",
    "toml",
    "pyyaml",
    "requests",
]

retrieval = ["kuzu", "faiss-cpu"]
chromadb = ["chromadb", "tiktoken"]
lmstudio = ["lmstudio"]
memory = ["tinydb", "duckdb", "lmdb", "kuzu", "faiss-cpu", "chromadb", "numpy"]
llm = ["tiktoken", "httpx"]
gpu = [
    "torch",
    "nvidia-cublas-cu12",
    "nvidia-cuda-cupti-cu12",
    "nvidia-cuda-nvrtc-cu12",
    "nvidia-cuda-runtime-cu12",
    "nvidia-cudnn-cu12",
    "nvidia-cufft-cu12",
    "nvidia-cufile-cu12",
    "nvidia-curand-cu12",
    "nvidia-cusolver-cu12",
    "nvidia-cusparse-cu12",
    "nvidia-cusparselt-cu12",
    "nvidia-nccl-cu12",
    "nvidia-nvjitlink-cu12",
    "nvidia-nvtx-cu12",
]
offline = ["transformers"]
api = ["fastapi", "prometheus-client"]
webui = ["nicegui"]
gui = ["dearpygui"]
tests = ["fastapi", "httpx", "tinydb", "duckdb", "lmdb", "astor"]
dev = [
    "responses",
    "pytest",
    "pytest-bdd",
    "pytest-cov",
    "pytest-mock",
    "pytest-xdist",
    "black",
    "isort",
    "pre-commit",
    "psutil",
    "mypy",
    "pydantic-settings",
    "toml",
    "pyyaml",
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings-python",
    "mkdocs-gen-files",
    "mkdocs-include-markdown-plugin",
    "mkdocs-typer2",
    "mkdocs-literate-nav",
    "mkdocs-section-index",
]

[tool.poetry.scripts]
devsynth = "devsynth.adapters.cli.typer_adapter:run_cli"
mvuu-dashboard = "devsynth.application.cli.commands.mvuu_dashboard_cmd:mvuu_dashboard_cmd"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.black]
line-length = 88
target-version = ["py312"]

[tool.isort]
profile = "black"
line_length = 88

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
per-file-ignores = [
  # Allow long docstrings and BDD steps in behavior tests
  "tests/behavior/*.py: E501",
]

[tool.devsynth]
project_root = "."
language = "python"
directories = {source = ["src"], tests = ["tests"], docs = ["docs"]}
features = {}

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

# Relax strictness for recently changed modules to allow incremental typing.
# Rationale: these modules are actively evolving; we keep global strictness high
# while avoiding blocking changes. Add TODOs in modules to restore strictness.
# Target to restore strictness: 2025-10-01
[[tool.mypy.overrides]]
module = "devsynth.application.cli.commands.inspect_code_cmd"
disallow_untyped_defs = false
check_untyped_defs = false

[[tool.mypy.overrides]]
module = "devsynth.methodology.edrr.reasoning_loop"
disallow_untyped_defs = false
check_untyped_defs = false

# Temporary relaxations added by Task 6.3 (Iteration 2025-08-31).
# TODO: Restore strictness by 2025-10-01.
[[tool.mypy.overrides]]
module = "devsynth.feature_markers"
disallow_untyped_defs = false
check_untyped_defs = false

[[tool.mypy.overrides]]
module = "devsynth.core.mvu.*"
disallow_untyped_defs = false
check_untyped_defs = false
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "devsynth.application.documentation.*"
# Broad issues to be addressed incrementally; ignore temporarily
ignore_errors = true

[[tool.mypy.overrides]]
module = "devsynth.domain.models.requirement"
# UUID/None typing fixes pending
ignore_errors = true

[[tool.mypy.overrides]]
module = "devsynth.application.performance"
# __init__ typing cleanups pending
ignore_errors = true

# Additional temporary relaxations added by Task 6.3 (Iteration 2025-08-31).
# TODO: Restore strictness by 2025-10-01.
[[tool.mypy.overrides]]
module = "devsynth.adapters.requirements.*"
# High-churn requirements adapters
ignore_errors = true

[[tool.mypy.overrides]]
module = "devsynth.application.memory.adapters.*"
# Complex memory adapters with pending annotations
ignore_errors = true

# Broad adapters temp relaxation; narrow in future iterations
# TODO: Restore strictness by 2025-10-01.
[[tool.mypy.overrides]]
module = "devsynth.adapters.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "devsynth.exceptions"
ignore_errors = true

[[tool.mypy.overrides]]
module = "devsynth.testing.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "devsynth.methodology.sprint"
ignore_errors = true

# Temporary relaxations for remaining hotspots (Iteration 2025-08-31)
# TODO: Restore strictness by 2025-10-01.
[[tool.mypy.overrides]]
module = "devsynth.logger"
ignore_errors = true

[[tool.mypy.overrides]]
module = "devsynth.methodology.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "devsynth.domain.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "devsynth.application.edrr.*"
ignore_errors = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
