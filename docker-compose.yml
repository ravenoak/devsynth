version: '3.8'

services:
  # Main DevSynth application
  devsynth:
    image: ghcr.io/devsynth/devsynth:${DEVSYNTH_IMAGE_TAG:-latest}
    build:
      context: .
      target: development
    volumes:
      - .:/opt/pysetup
      - ~/.devsynth:/home/devsynth/.devsynth
      - ./logs:/var/log/devsynth
    env_file:
      - .env
    user: "${UID:-1000}:${GID:-1000}"
    ports:
      - "8000:8000"
    environment:
      - DEVSYNTH_ENV=development
      - DEVSYNTH_LOG_LEVEL=DEBUG
      - DEVSYNTH_LOG_DIR=/var/log/devsynth
      - DEVSYNTH_LLM_PROVIDER=openai
    networks:
      - devsynth-network
    profiles:
      - development
      - staging
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"


  # Development tools
  dev-tools:
    build:
      context: .
      target: development
    volumes:
      - .:/opt/pysetup
    command: /bin/bash -c "tail -f /dev/null"
    env_file:
      - .env
    user: "${UID:-1000}:${GID:-1000}"
    networks:
      - devsynth-network
    profiles:
      - tools
      - development
    healthcheck:
      test: ["CMD", "true"]
      interval: 1m
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Test runner
  test-runner:
    build:
      context: .
      target: testing
    volumes:
      - .:/opt/pysetup
    environment:
      - DEVSYNTH_ENV=testing
    env_file:
      - .env
    user: "${UID:-1000}:${GID:-1000}"
    networks:
      - devsynth-network
    profiles:
      - test
      - testing
    healthcheck:
      test: ["CMD", "true"]
      interval: 1m
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional ChromaDB service for persistent vector storage
  chromadb:
    image: ghcr.io/chroma-core/chroma:latest
    volumes:
      - chromadb-data:/chroma
    environment:
      - IS_PERSISTENT=TRUE
    user: "${UID:-1000}:${GID:-1000}"
    ports:
      - "8001:8000"
    networks:
      - devsynth-network
    profiles:
      - memory
      - development
      - staging
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/collections"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  prometheus:
    image: prom/prometheus
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    user: "${UID:-1000}:${GID:-1000}"
    networks:
      - devsynth-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/-/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    user: "${UID:-1000}:${GID:-1000}"
    networks:
      - devsynth-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # CI utilities for publishing and rollback
  publish:
    build:
      context: .
      target: production
    entrypoint: ["/bin/bash", "scripts/deployment/publish_image.sh", "${DEVSYNTH_IMAGE_TAG:-latest}"]
    user: "${UID:-1000}:${GID:-1000}"
    profiles:
      - ci

  rollback:
    build:
      context: .
      target: production
    entrypoint: ["/bin/bash", "scripts/deployment/rollback.sh", "${DEVSYNTH_ROLLBACK_TAG:-latest}", "development"]
    user: "${UID:-1000}:${GID:-1000}"
    profiles:
      - ci


networks:
  devsynth-network:
    name: devsynth-network
volumes:
  chromadb-data:
    name: devsynth-chromadb-data
  grafana-data:
    name: devsynth-grafana-data
