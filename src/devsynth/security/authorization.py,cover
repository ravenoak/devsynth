> """Simple role-based authorization utilities."""
  
> from typing import Dict, Iterable
  
> from devsynth.exceptions import AuthorizationError
  
  
> def is_authorized(
>     user_roles: Iterable[str], action: str, acl: Dict[str, Iterable[str]]
> ) -> bool:
>     """Check whether any of the user's roles grants access to the action.
  
>     Args:
>         user_roles: Roles associated with the user.
>         action: Action being attempted.
>         acl: Mapping of role names to allowed actions.
  
>     Returns:
>         True if authorized, False otherwise.
>     """
!     for role in user_roles:
!         allowed = acl.get(role, [])
!         if action in allowed or "*" in allowed:
!             return True
!     return False
  
  
> def require_authorization(
>     user_roles: Iterable[str], action: str, acl: Dict[str, Iterable[str]]
> ) -> None:
>     """Raise AuthorizationError if the user is not permitted to perform the action."""
!     if not is_authorized(user_roles, action, acl):
!         raise AuthorizationError(
!             "Permission denied",
!             details={"roles": list(user_roles), "action": action},
!         )
