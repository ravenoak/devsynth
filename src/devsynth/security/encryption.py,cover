> from __future__ import annotations
  
> """Simple encryption helpers using Fernet symmetric encryption."""
  
> import os
> from typing import Optional
> from cryptography.fernet import Fernet
  
  
> _DEFAULT_ENV_KEY = "DEVSYNTH_ENCRYPTION_KEY"
  
  
> def generate_key() -> str:
>     """Generate a base64 encoded Fernet key."""
!     return Fernet.generate_key().decode()
  
  
> def _get_fernet(key: Optional[str] = None) -> Fernet:
!     key_bytes = key or os.environ.get(_DEFAULT_ENV_KEY)
!     if not key_bytes:
!         raise ValueError("Encryption key not provided")
!     if isinstance(key_bytes, str):
!         key_bytes = key_bytes.encode()
!     return Fernet(key_bytes)
  
  
> def encrypt_bytes(data: bytes, key: Optional[str] = None) -> bytes:
>     """Encrypt bytes using Fernet."""
!     return _get_fernet(key).encrypt(data)
  
  
> def decrypt_bytes(token: bytes, key: Optional[str] = None) -> bytes:
>     """Decrypt bytes using Fernet."""
!     return _get_fernet(key).decrypt(token)
