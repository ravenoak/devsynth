> """Simple in-memory vector store used when KuzuDB is unavailable."""
! from __future__ import annotations
  
! import os
! import uuid
! from typing import Any, Dict, List, Optional
  
! import numpy as np
  
! from devsynth.domain.interfaces.memory import VectorStore
! from devsynth.domain.models.memory import MemoryVector
! from devsynth.logging_setup import DevSynthLogger
  
! logger = DevSynthLogger(__name__)
  
  
! class KuzuAdapter(VectorStore):
!     """Vector store interface mimicking ``ChromaDBAdapter``."""
  
!     def __init__(self, persist_directory: str, collection_name: str = "devsynth_vectors") -> None:
!         self.persist_directory = persist_directory
!         self.collection_name = collection_name
!         os.makedirs(persist_directory, exist_ok=True)
!         self._store: Dict[str, MemoryVector] = {}
  
!     def store_vector(self, vector: MemoryVector) -> str:
!         if not vector.id:
!             vector.id = str(uuid.uuid4())
!         self._store[vector.id] = vector
!         return vector.id
  
!     def retrieve_vector(self, vector_id: str) -> Optional[MemoryVector]:
!         return self._store.get(vector_id)
  
!     def similarity_search(self, query_embedding: List[float], top_k: int = 5) -> List[MemoryVector]:
!         results = []
!         q = np.array(query_embedding, dtype=float)
!         for vec in self._store.values():
!             dist = float(np.linalg.norm(q - np.array(vec.embedding, dtype=float)))
!             results.append((dist, vec))
!         results.sort(key=lambda x: x[0])
!         return [v for _, v in results[:top_k]]
  
!     def delete_vector(self, vector_id: str) -> bool:
!         return self._store.pop(vector_id, None) is not None
  
!     def get_collection_stats(self) -> Dict[str, Any]:
!         dim = 0
!         if self._store:
!             dim = len(next(iter(self._store.values())).embedding)
!         return {
!             "collection_name": self.collection_name,
!             "num_vectors": len(self._store),
!             "embedding_dimension": dim,
!             "persist_directory": self.persist_directory,
!         }
