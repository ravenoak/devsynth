> """Query Router for hybrid memory system."""
  
> from __future__ import annotations
  
> from typing import Any, Dict, List, Optional
  
> from typing import TYPE_CHECKING
> from ...logging_setup import DevSynthLogger
  
> if TYPE_CHECKING:
!     from .memory_manager import MemoryManager
  
> logger = DevSynthLogger(__name__)
  
  
> class QueryRouter:
>     """Route queries to the appropriate memory stores."""
  
>     def __init__(self, memory_manager: MemoryManager) -> None:
!         self.memory_manager = memory_manager
  
>     def direct_query(self, query: str, store: str) -> List[Any]:
>         """Query a single store directly."""
!         store = store.lower()
!         adapter = self.memory_manager.adapters.get(store)
!         if not adapter:
!             logger.warning("Adapter %s not found", store)
!             return []
  
!         if store == "vector":
!             return self.memory_manager.search_memory(query)
  
!         if store == "graph" and not hasattr(adapter, "search"):
              # Use specialized graph query if available
!             return self.memory_manager.query_related_items(query)
  
!         if hasattr(adapter, "search"):
!             if isinstance(query, str):
!                 return adapter.search({"content": query})
!             return adapter.search(query)
  
!         logger.warning("Adapter %s does not support direct queries", store)
!         return []
  
>     def cross_store_query(self, query: str) -> Dict[str, List[Any]]:
>         """Query all configured stores and return grouped results."""
!         results: Dict[str, List[Any]] = {}
!         for name in self.memory_manager.adapters:
!             results[name] = self.direct_query(query, name)
!         return results
  
>     def cascading_query(
>         self, query: str, order: Optional[List[str]] = None
>     ) -> List[Any]:
>         """Query stores in sequence and aggregate results."""
!         order = order or ["document", "tinydb", "vector", "graph"]
!         results: List[Any] = []
!         for name in order:
!             if name in self.memory_manager.adapters:
!                 results.extend(self.direct_query(query, name))
!         return results
  
>     def federated_query(self, query: str) -> Dict[str, List[Any]]:
>         """Perform a federated query across all stores."""
!         return self.cross_store_query(query)
  
>     def context_aware_query(
>         self, query: str, context: Dict[str, Any], store: Optional[str] = None
>     ) -> Any:
>         """Enhance the query with context information."""
!         context_str = " ".join(f"{k}:{v}" for k, v in context.items())
!         enhanced_query = f"{query} {context_str}".strip()
!         if store:
!             return self.direct_query(enhanced_query, store)
!         return self.cross_store_query(enhanced_query)
  
>     def route(
>         self,
>         query: str,
>         store: Optional[str] = None,
>         strategy: str = "direct",
>         context: Optional[Dict[str, Any]] = None,
>     ) -> Any:
>         """Route a query according to the specified strategy."""
!         if strategy == "direct" and store:
!             return self.direct_query(query, store)
!         if strategy == "cross":
!             return self.cross_store_query(query)
!         if strategy == "cascading":
!             return self.cascading_query(query)
!         if strategy == "federated":
!             return self.federated_query(query)
!         if strategy == "context_aware":
!             return self.context_aware_query(query, context or {}, store)
  
!         logger.warning("Unknown query strategy %s", strategy)
!         return []
