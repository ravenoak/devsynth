> """Synchronization manager for hybrid memory."""
  
> from __future__ import annotations
  
> from typing import Any, Dict, List, Optional, TYPE_CHECKING
  
> from ...logging_setup import DevSynthLogger
> from ...domain.models.memory import MemoryItem
> from .tiered_cache import TieredCache
  
> if TYPE_CHECKING:
!     from .memory_manager import MemoryManager
  
> logger = DevSynthLogger(__name__)
  
  
> class SyncManager:
>     """Synchronize memory items between different stores."""
  
>     def __init__(self, memory_manager: MemoryManager, cache_size: int = 50) -> None:
!         self.memory_manager = memory_manager
!         self._queue: List[tuple[str, MemoryItem]] = []
!         self.cache: TieredCache[Dict[str, List[Any]]] = TieredCache(max_size=cache_size)
  
>     def _get_all_items(self, adapter: Any) -> List[MemoryItem]:
!         if hasattr(adapter, "get_all_items"):
!             return adapter.get_all_items()
!         if hasattr(adapter, "search"):
!             return adapter.search({})
!         return []
  
>     def synchronize(
>         self, source: str, target: str, bidirectional: bool = False
>     ) -> Dict[str, int]:
>         """Synchronize items from source to target (optionally both ways)."""
!         source_adapter = self.memory_manager.adapters.get(source)
!         target_adapter = self.memory_manager.adapters.get(target)
!         if not source_adapter or not target_adapter:
!             logger.warning("Sync failed due to missing adapters")
!             return {"error": 1}
  
!         count = 0
!         for item in self._get_all_items(source_adapter):
!             if hasattr(target_adapter, "store"):
!                 target_adapter.store(item)
!                 count += 1
!         result = {f"{source}_to_{target}": count}
  
!         if bidirectional:
!             reverse = self.synchronize(target, source, False)
!             result.update(reverse)
!         return result
  
>     def update_item(self, store: str, item: MemoryItem) -> bool:
>         """Update item in one store and propagate to others."""
!         adapter = self.memory_manager.adapters.get(store)
!         if not adapter:
!             return False
!         if hasattr(adapter, "store"):
!             adapter.store(item)
!         for name, other in self.memory_manager.adapters.items():
!             if name != store and hasattr(other, "store"):
!                 other.store(item)
!         return True
  
>     def queue_update(self, store: str, item: MemoryItem) -> None:
>         """Queue an update for asynchronous propagation."""
!         self._queue.append((store, item))
  
>     def flush_queue(self) -> None:
>         """Propagate all queued updates."""
!         for store, item in self._queue:
!             self.update_item(store, item)
!         self._queue = []
  
>     def cross_store_query(
>         self, query: str, stores: Optional[List[str]] | None = None
>     ) -> Dict[str, List[Any]]:
>         """Query multiple stores and cache the aggregated results."""
  
!         key_stores = ",".join(sorted(stores)) if stores else "all"
!         cache_key = f"{query}:{key_stores}"
!         cached = self.cache.get(cache_key)
!         if cached is not None:
!             return cached
  
!         stores = stores or list(self.memory_manager.adapters.keys())
!         results: Dict[str, List[Any]] = {}
!         for name in stores:
!             adapter = self.memory_manager.adapters.get(name)
!             if not adapter:
!                 continue
!             if name == "vector" and hasattr(adapter, "similarity_search"):
!                 embedding = self.memory_manager._embed_text(query)
!                 results[name] = adapter.similarity_search(embedding, top_k=5)
!             elif hasattr(adapter, "search"):
!                 results[name] = adapter.search({"content": query})
  
!         self.cache.put(cache_key, results)
!         return results
  
>     def clear_cache(self) -> None:
>         """Clear cached query results."""
  
!         self.cache.clear()
  
>     def get_cache_size(self) -> int:
>         """Return number of cached queries."""
  
!         return self.cache.size()
