"""[experimental] Generate a web application with the specified framework.

Currently full support is implemented for Flask; other frameworks produce scaffolds only.
"""

from __future__ import annotations

import os
import shutil
from typing import Optional

from rich.markdown import Markdown
from rich.panel import Panel
from rich.table import Table

from devsynth.interface.ux_bridge import UXBridge

from ..utils import _resolve_bridge


def webapp_cmd(
    framework: str = "flask",
    name: str = "webapp",
    path: str = ".",
    force: bool = False,
    *,
    bridge: Optional[UXBridge] = None,
) -> None:
    """Generate a web application with the specified framework.

    Example:
        `devsynth webapp --framework flask --name myapp --path ./apps`
    """
    bridge = _resolve_bridge(bridge)
    try:
        # Show a welcome message for the webapp command
        bridge.print(
            Panel(
                f"[bold blue]DevSynth Web Application Generator[/bold blue]\n\n",
                f"This command will generate a basic web application using the {framework} framework.",
                title="Web Application Generator",
                border_style="blue",
            )
        )

        # Validate and normalize the framework name
        framework = framework.lower()
        supported_frameworks = ["flask", "fastapi", "django", "express"]

        if framework not in supported_frameworks:
            raise ValueError(
                f"Unsupported framework '{framework}'. Supported: {', '.join(supported_frameworks)}"
            )

        # Sanitize project name
        name = name.replace(" ", "_").lower()

        # Create full project path
        project_path = os.path.join(path, name)

        # Check if directory already exists
        if os.path.exists(project_path):
            if not force:
                bridge.display_result(
                    f"[yellow]Directory {project_path} already exists. Use --force to overwrite.[/yellow]"
                )
                return
            shutil.rmtree(project_path)

        # Create project directory
        os.makedirs(project_path, exist_ok=True)

        # Show progress during generation
        with bridge.create_progress(
            f"Generating {framework} project...", total=100
        ) as progress:

            # Generate Flask project (for now, we'll only implement Flask)
            if framework == "flask":
                # Create app directory
                app_dir = os.path.join(project_path, name)
                os.makedirs(app_dir, exist_ok=True)

                progress.update(advance=20, description="Creating Flask application...")

                # Create __init__.py
                with open(os.path.join(app_dir, "__init__.py"), "w") as f:
                    f.write(
                        """from flask import Flask

def create_app():
    app = Flask(__name__)

    # Import and register blueprints
    from .routes import main_bp
    app.register_blueprint(main_bp)

    return app
"""
                    )

                # Create routes.py
                with open(os.path.join(app_dir, "routes.py"), "w") as f:
                    f.write(
                        """from flask import Blueprint, render_template

main_bp = Blueprint('main', __name__)

@main_bp.route('/')
def index():
    return render_template('index.html', title='Home')
"""
                    )

                # Create templates directory
                templates_dir = os.path.join(app_dir, "templates")
                os.makedirs(templates_dir, exist_ok=True)

                # Create index.html
                with open(os.path.join(templates_dir, "index.html"), "w") as f:
                    f.write(
                        """<!DOCTYPE html>
<html lang=\"en\">
<head>
    <meta charset=\"UTF-8\">
    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
    <title>{{ title }}</title>
    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/style.css') }}\">
</head>
<body>
    <header>
        <h1>Welcome to {{ title }}</h1>
    </header>
    <main>
        <p>This is a Flask application generated by DevSynth.</p>
    </main>
    <footer>
        <p>&copy; 2023 DevSynth</p>
    </footer>
</body>
</html>
"""
                    )

                # Create static directory and CSS file
                static_dir = os.path.join(app_dir, "static", "css")
                os.makedirs(static_dir, exist_ok=True)

                with open(os.path.join(static_dir, "style.css"), "w") as f:
                    f.write(
                        """body {
    font-family: Arial, sans-serif;
    line-height: 1.6;
    margin: 0;
    padding: 0;
    color: #333;
}

header, footer {
    background-color: #4a5568;
    color: white;
    text-align: center;
    padding: 1rem;
}

main {
    max-width: 800px;
    margin: 2rem auto;
    padding: 0 1rem;
}
"""
                    )

                progress.update(advance=40, description="Creating application files...")

                # Create app.py
                with open(os.path.join(project_path, "app.py"), "w") as f:
                    f.write(
                        f"""from {name} import create_app

app = create_app()

if __name__ == '__main__':
    app.run(debug=True)
"""
                    )

                # Create requirements.txt
                with open(os.path.join(project_path, "requirements.txt"), "w") as f:
                    f.write(
                        """flask==2.3.3
python-dotenv==1.0.0
"""
                    )

                # Create README.md
                with open(os.path.join(project_path, "README.md"), "w") as f:
                    f.write(
                        f"""# {name.capitalize()} Flask Application

A Flask web application generated by DevSynth.

## Setup

1. Create a virtual environment:
   ```
   python -m venv venv
   ```

2. Activate the virtual environment:
   ```
   source venv/bin/activate  # On Windows: venv\\Scripts\\activate
   ```

3. Install dependencies:
   ```
   pip install -r requirements.txt
   ```

4. Run the application:
   ```
   flask run
   ```

5. Open your browser and navigate to:
   ```
   http://localhost:5000
   ```
"""
                    )

                progress.update(
                    advance=40, description="Creating configuration files..."
                )
            else:
                # For other frameworks, just create a placeholder README
                with open(os.path.join(project_path, "README.md"), "w") as f:
                    f.write(
                        f"""# {name.capitalize()} {framework.capitalize()} Application

A {framework.capitalize()} web application generated by DevSynth.

Note: Full support for {framework} will be implemented in a future version.
"""
                    )
                progress.update(advance=100)

            # Mark task as complete
            progress.complete()

        bridge.display_result(
            f"[green]✓ Web application generated successfully at: {project_path}[/green]"
        )

        # Show next steps based on the framework
        bridge.display_result("\n[bold blue]Next Steps:[/bold blue]")

        if framework == "flask":
            bridge.display_result("1. Create a virtual environment:")
            bridge.display_result(
                f"   [green]cd {project_path} && python -m venv venv[/green]"
            )
            bridge.display_result("2. Activate the virtual environment:")
            bridge.display_result(
                f"   [green]source venv/bin/activate  # On Windows: venv\\Scripts\\activate[/green]"
            )
            bridge.display_result("3. Install dependencies:")
            bridge.display_result(f"   [green]pip install -r requirements.txt[/green]")
            bridge.display_result("4. Run the application:")
            bridge.display_result(f"   [green]flask run[/green]")
        else:
            bridge.display_result(
                f"Support for {framework} will be implemented in a future version."
            )

        bridge.display_result("\n[bold blue]Access your application:[/bold blue]")
        bridge.display_result(
            "Open your browser and navigate to: [green]http://localhost:5000[/green]"
        )

    except Exception as err:
        bridge.display_result(f"[red]✗ Error:[/red] {str(err)}", highlight=False)
        bridge.display_result(
            "[red]An unexpected error occurred during web application generation.[/red]"
        )

        # Show detailed error information
        import traceback

        bridge.print(
            Panel(
                traceback.format_exc(),
                title="Detailed Error Information",
                border_style="red",
            )
        )


__all__ = ["webapp_cmd"]
