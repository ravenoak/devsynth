#!/usr/bin/env python3
"""Check for outdated dependencies and optionally update them."""

from __future__ import annotations

import argparse
import subprocess
import sys


def list_outdated() -> None:
    """List outdated dependencies using poetry."""
    subprocess.check_call(["poetry", "show", "--outdated"])


def apply_updates() -> None:
    """Apply dependency updates using poetry."""
    subprocess.check_call(["poetry", "update"])


def main() -> None:
    parser = argparse.ArgumentParser(
        description="Vulnerability management and patching utility."
    )
    parser.add_argument(
        "--apply",
        action="store_true",
        help="Apply available updates after listing outdated packages.",
    )
    args = parser.parse_args()

    if args.apply:
        apply_updates()
    list_outdated()


if __name__ == "__main__":
    try:
        main()
    except subprocess.CalledProcessError as exc:  # pragma: no cover - script entry
        print(f"Vulnerability management failed with code {exc.returncode}")
        sys.exit(exc.returncode)
